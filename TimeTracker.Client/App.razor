@inject IProjectService ProjectService
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

<CascadingAuthenticationState>
  <Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
            <NotAuthorized>
                    <h3>Whoops!</h3>
                    Looks like you are not Logged in, so you are not authorized to this area.<br />
                    Please <a href="login">Login</a> or <a href="register">Register</a> first.
            </NotAuthorized>
        </AuthorizeRouteView>
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
  </Router>
</CascadingAuthenticationState>
@code {
    protected override void OnInitialized()
    {
        AuthStateProvider.AuthenticationStateChanged += OnAuthStateChanged;
    }

    public async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        if (authState != null && authState.User.Identity!.IsAuthenticated)
        {
            var roles = authState.User.Claims.Where(c => c.Type == ClaimTypes.Role)
                    .Select(c => c.Value).ToList();
            if (roles.Contains("Admin"))
            {
              await ProjectService.LoadAllProjects();           
            }
        }
        
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthStateChanged;
    }
}