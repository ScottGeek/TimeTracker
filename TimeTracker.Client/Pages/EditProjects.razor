@page "/project"
@page "/project/{id:int}"
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]

@if (Id is null)
{
    <PageTitle>Create a new Project</PageTitle>
    <h3>Create a new Project</h3>
}
else
{
    <PageTitle>Edit the Project "@project.Name"</PageTitle>
    <h3>Edit the Project "@project.Name"</h3>
}

<EditForm Model="project" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />

    <MyInputText Id="name" Label="Name" @bind-Value="project.Name" ValFor="() => project.Name" />
    <MyInputTextArea Id="description" Label="Description" @bind-Value="project.Description" ValFor="() => project.Description" />
    <MyInputDateNullable Id="startDate" Label="Start" @bind-Value="project.StartDate" ValFor="() => project.StartDate" />
    <MyInputDateNullable Id="endDate" Label="End" @bind-Value="project.EndDate" ValFor="() => project.EndDate" />

    <div class="flex gap-4">
        @if (Id is not null)
        {
            <MyButton Text="Delete" Level="MyButton.ButtonLevel.Danger" AddMarginTop="true" OnClick="DeleteProject" />
        }
        <MyButton Text="Save" Type="submit" Level="MyButton.ButtonLevel.Primary" AddMarginTop="true" />
    </div>
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    ProjectRequest project = new ProjectRequest { Name = string.Empty};

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await ProjectService.GetProjectById((int)Id);
            project = result.Adapt<ProjectRequest>();
        }
    }

    public async Task DeleteProject()
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the project '{project.Name}'?");
        if (Id is not null && confirm)
        {
            await ProjectService.DeleteProject((int)Id);
            NavigationManager.NavigateTo("/projects");
        }
    }

    public async Task HandleSubmit()
    {
        if (Id is null)
        {
            await ProjectService.CreateProject(project);
            NavigationManager.NavigateTo("/projects");
        }
        else
        {
            await ProjectService.UpdateProject((int)Id, project);
            NavigationManager.NavigateTo("/projects");
        }
    }

}
