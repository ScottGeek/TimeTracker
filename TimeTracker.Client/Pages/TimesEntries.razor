@page "/timeentries"

@inject ITimeEntryService TimeEntryService
@inject NavigationManager NavigationManager
@implements IDisposable
@attribute [Authorize]

<PageTitle>Time Entries</PageTitle>
<h3>Times Entries</h3>

<ProjectSelector />

<MyButton Text="Create Time Entry" Level="MyButton.ButtonLevel.Primary" OnClick="CreateTimeEntry"  AddMarginBottom/>

<QuickGrid Items="FilteredTimeEntries" Theme="Default" Pagination="@pagination">
    <PropertyColumn Property="t => t.Start" />
    <PropertyColumn Property="t => t.End" />
    <PropertyColumn Property="t => GetDuration(t.Start, t.End)" Title="Duration"/>
    <PropertyColumn Property="t => t.Project.Name" Title= "Project" Align="Align.Center">
        <ColumnOptions>
            <div>
                <input type="search" autofocus @bind="projectFilter" @bind:event="oninput"
                       placeholder="Project name..." class="mt-1 p-2 w-full rounded-md border-gray-200 shadow-sm sm:text-sm" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
      <TemplateColumn>
         <MyButton Text="Show Project" Level="MyButton.ButtonLevel.Primary" OnClick="@(()=> ShowProject(context.Project.Id))" />
@*          <button class="btn btn-primary" onclick="@(()=> ShowProject(context.Project.Id))">Show Project</button> *@
      </TemplateColumn>
      <TemplateColumn>
         <button class="block rounded-md bg-teal-600 px-4 py-2.5 text-sm font-medium text-white transition hover:bg-teal-700" onclick="@(()=> EditTimeEntry(context.Id))">
             <svg class="w-5 h-5 text-white-800" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                 <path d="M12.687 14.408a3.01 3.01 0 0 1-1.533.821l-3.566.713a3 3 0 0 1-3.53-3.53l.713-3.566a3.01 3.01 0 0 1 .821-1.533L10.905 2H2.167A2.169 2.169 0 0 0 0 4.167v11.666A2.169 2.169 0 0 0 2.167 18h11.666A2.169 2.169 0 0 0 16 15.833V11.1l-3.313 3.308Zm5.53-9.065.546-.546a2.518 2.518 0 0 0 0-3.56 2.576 2.576 0 0 0-3.559 0l-.547.547 3.56 3.56Z" />
                 <path d="M13.243 3.2 7.359 9.081a.5.5 0 0 0-.136.256L6.51 12.9a.5.5 0 0 0 .59.59l3.566-.713a.5.5 0 0 0 .255-.136L16.8 6.757 13.243 3.2Z" />
             </svg>
         </button>
      </TemplateColumn>
</QuickGrid>
<Paginator State="@pagination" />


@if (projectId > 0)
{
    <ProjectDetails ProjectId="projectId"/>
}

@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    int projectId = 0;
    private string? projectFilter;

    IQueryable<TimeEntryResponse> FilteredTimeEntries
    { 
        get
        { 
            var result = TimeEntryService.TimeEntries.AsQueryable();
            if (!string.IsNullOrEmpty(projectFilter))
            {
                result = result.Where(t => t.Project.Name.Contains(projectFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
     }

    protected override async Task OnInitializedAsync()
    {
        await TimeEntryService.GetTimeEntriesByProject(projectId);
        TimeEntryService.OnChange += StateHasChanged;
    }


    private string GetDuration(DateTime? startTime, DateTime? endTime)
    {

        if (startTime != null && endTime != null)
        {
            var duration = endTime.Value - startTime.Value;
            var result = $"{duration.Hours}h {duration.Minutes}m {duration.Seconds}s";
            return result;
        }
        return string.Empty;

    }

    private void ShowProject(int id)
    {
        if (projectId == id)
        {
            return;
        }
        else
        {
            projectId = id;
        }

        StateHasChanged();

    }

    public void Dispose()
    {
        projectId = 0;
        TimeEntryService.OnChange -= StateHasChanged;
    }

    private void CreateTimeEntry()
    {
        NavigationManager.NavigateTo("/timeentry");
    }

    private void EditTimeEntry(int id)
    {
        NavigationManager.NavigateTo($"/timeentry/{id}");
    }
}
