@page "/timeentry"
@page "/timeentry/{id:int}"
@inject ITimeEntryService TimeEntryService
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable
@attribute [Authorize]

@if(Id is null)
{
    <h3>Create Time Entry</h3>
}
else
{
    <h3>Edit Time Entry</h3>
}


<EditForm Model="timeEntry" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />

    <MyInputDateTime Id="startDate" Label="Start" 
        @bind-Value="timeEntry.Start" ValFor="() => timeEntry.Start" />
    <MyInputDateTimeNullable Id="endDate" Label="End" 
        @bind-Value="timeEntry.End" ValFor="() => timeEntry.End" />
    <MyInputSelect Id="project" Label="Project"
        @bind-Value="timeEntry.ProjectId" ValFor="() => timeEntry.ProjectId" 
        Items = "ProjectService.Projects
                  .Select(p => new MyInputSelect.SelectListItem {
                    Value = p.Id.ToString(), DisplayName = p.Name
         })"/>

    <div class="flex gap-4">
    @if(Id is not null)
    {
        <MyButton Text="Delete" Level="MyButton.ButtonLevel.Danger" AddMarginTop = "true" OnClick="DeleteTimeEntry"/>
    }

    <MyButton Text="Save" Type="submit" Level="MyButton.ButtonLevel.Primary" AddMarginTop="true" />
    </div>
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    TimeEntryRequest timeEntry = new TimeEntryRequest();

    protected override void OnInitialized()
    {
        ProjectService.OnChange += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            var result = await TimeEntryService.GetTimeEntryById((int)Id);

            timeEntry = new TimeEntryRequest
            {
              End = result.End,
              Start = result.Start,
              ProjectId = result.Project.Id

            };

        }
    }

    public async Task HandleSubmit()
    {
        if(Id is null)
        {
            await TimeEntryService.CreateTimeEntry(timeEntry);
            NavigationManager.NavigateTo("/timeentries");
        }
        else
        {
            await TimeEntryService.UpdateTimeEntry((int)Id,timeEntry);
            NavigationManager.NavigateTo("/timeentries");
        }

    }

    public async Task DeleteTimeEntry()
    {

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this time entry?");

        if (Id is not null && confirmed)
        {
            await TimeEntryService.DeleteTimeEntry((int)Id);
        }
        NavigationManager.NavigateTo("/timeentries");
    }

    public void Dispose()
    {
        ProjectService.OnChange -= StateHasChanged;
    }
}
