
@inherits InputBase<DateTime?>

<div>
    @if(!string.IsNullOrEmpty(Label))
    {
      <label for="@Id" class="block text-xs font-medium text-gray-700 mt-2 font-bold">@Label</label>
    }
   <input id="@Id" type="@Type" class="@css" @bind="@CurrentValueAsString" />
    <ValidationMessage For="@ValFor" class="text-xs text-red-600 font-bold my-1" />
</div>

@code {
    private string css = "mt-1 p-2 w-full rounded-md border-gray-200 shadow-sm sm:text-sm";

    [Parameter]
    public string? Id { get; set; }
    [Parameter]
    public string? Label { get; set; }
    [Parameter]
    public string? Type { get; set; } = "datetime-local";
    [Parameter]
    public bool AddMarginTop { get; set; } = false;
    [Parameter]
    public Expression<Func<DateTime?>> ValFor { get; set; } = default!;

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out DateTime? result, [NotNullWhen(false)] out string validationErrorMessage)
    {

        if(DateTime.TryParse(value, out DateTime tempResult))
        {
            result = tempResult;
            validationErrorMessage = string.Empty;
            return true;
        }

        result = null;
        validationErrorMessage = $"The {FieldIdentifier.FieldName} field is not a valid date.";
        return false;
    }

    protected override string FormatValueAsString(DateTime? value)
    {
        if(value == null || !value.HasValue)
        {
            return string.Empty;
        }
        return value.Value.ToString("yyyy-MM-ddTHH:mm");
    }

    protected override void OnParametersSet()
    {
        if(AddMarginTop)
        {
            css += " mt-2";
        }
    }

}